import 'dart:async';
import 'dart:developer' as log;
import 'package:bouncer/controllers/ballWidgetController.dart';
import 'package:bouncer/controllers/platformWidgetController.dart';
import 'package:bouncer/particles.dart';
import 'package:bouncer/widgets/ballWidget.dart';
import 'package:bouncer/widgets/brick.dart';
import 'package:bouncer/widgets/platformWidget.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:sensors_plus/sensors_plus.dart';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º enum –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä—ã
enum GameState {
  initial, // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å")
  playing, // –ò–≥—Ä–∞ –∏–¥–µ—Ç
  paused, // –ò–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ
  gameOver, // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
}

class GameScreen extends StatefulWidget {
  const GameScreen({super.key});

  @override
  State<StatefulWidget> createState() => GameScreenState();
}

class GameScreenState extends State {
  // –ó–∞–º–µ–Ω—è–µ–º –±—É–ª–µ–≤—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –æ–¥–Ω—É enum –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  GameState currentGameState = GameState.initial;

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  ParticleSystem particleSystem = ParticleSystem();
  final FocusNode _focusNode = FocusNode();
  late StreamSubscription<AccelerometerEvent> sub;
  late BallWidgetController ballController;
  late PlatformWidgetController platformController;
  List<Brick> myBricks = [];
  Timer? gameTimer; // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–π–º–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

  @override
  void initState() {
    super.initState();
    restoreBricks();
    ballController = Provider.of<BallWidgetController>(context, listen: false);
    platformController =
        Provider.of<PlatformWidgetController>(context, listen: false);

    sub = accelerometerEventStream().listen((AccelerometerEvent event) {
      // –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
      if (currentGameState == GameState.playing) {
        if (event.y > 1) {
          platformController.moveRight();
        } else if (event.y < -1) {
          platformController.moveLeft();
        }
      }
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  void changeGameState(GameState newState) {
    log.log('üéÆ State change: ${currentGameState.name} -> ${newState.name}');
    setState(() {
      currentGameState = newState;
    });
  }

  // –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  void startNewGame() {
    log.log('üéÆ Starting new game');

    resetGame();
    changeGameState(GameState.playing);
    startGameLoop();
  }

  // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
  void resumeGame() {
    log.log('üéÆ Resuming game');

    changeGameState(GameState.playing);
    startGameLoop();
  }

  // –ü–∞—É–∑–∞ –∏–≥—Ä—ã
  void pauseGame() {
    log.log('üéÆ Pausing game');

    gameTimer?.cancel();
    changeGameState(GameState.paused);
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
  void endGame() {
    log.log('üéÆ Game over');

    gameTimer?.cancel();
    changeGameState(GameState.gameOver);
  }

  // –°–±—Ä–æ—Å –∏–≥—Ä—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
  void resetGame() {
    log.log('üéÆ Resetting game');

    gameTimer?.cancel();
    restoreBricks();
    ballController.reset();
    particleSystem.clear();
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
  void startGameLoop() {
    gameTimer?.cancel(); // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å

    gameTimer = Timer.periodic(const Duration(milliseconds: 16), (timer) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –∏–¥–µ—Ç
      if (currentGameState != GameState.playing) {
        timer.cancel();
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
      ballController.updateBallDirection(platformController);
      ballController.moveBall();
      particleSystem.update(0.016);
      checkForBrokenBricks(ballController);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
      if (isBallDownScreen(ballController)) {
        endGame();
      } else if (myBricks.isEmpty) {
        // –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ victory
        endGame();
      }
    });
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  bool get isInitial => currentGameState == GameState.initial;
  bool get isPlaying => currentGameState == GameState.playing;
  bool get isPaused => currentGameState == GameState.paused;
  bool get isGameOver => currentGameState == GameState.gameOver;

  // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏—è
  bool get shouldShowActionButton => !isPlaying;

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
  String getButtonText() {
    switch (currentGameState) {
      case GameState.initial:
        return '–ò–ì–†–ê–¢–¨';
      case GameState.paused:
        return '–ü–†–û–î–û–õ–ñ–ò–¢–¨';
      case GameState.gameOver:
        return '–ò–ì–†–ê–¢–¨ –°–ù–û–í–ê';
      case GameState.playing:
        return ''; // –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫–Ω–æ–ø–∫–∏
  IconData getButtonIcon() {
    switch (currentGameState) {
      case GameState.initial:
        return Icons.play_arrow;
      case GameState.paused:
        return Icons.play_arrow;
      case GameState.gameOver:
        return Icons.refresh;
      case GameState.playing:
        return Icons.play_arrow; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
  void onActionButtonPressed() {
    switch (currentGameState) {
      case GameState.initial:
        startNewGame();
        break;
      case GameState.paused:
        resumeGame();
        break;
      case GameState.gameOver:
        startNewGame();
        break;
      case GameState.playing:
        // –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        break;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Consumer2<PlatformWidgetController, BallWidgetController>(
      builder: (
        BuildContext context,
        PlatformWidgetController platform,
        BallWidgetController ball,
        Widget? child,
      ) =>
          Scaffold(
        backgroundColor: Colors.black,
        body: Center(
          child: KeyboardListener(
            autofocus: true,
            focusNode: _focusNode,
            onKeyEvent: (KeyEvent key) {
              // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
              if (isPlaying) {
                if (key.character == 'a') {
                  platform.moveLeft();
                }
                if (key.character == 'd') {
                  platform.moveRight();
                }
              }

              // –ü–∞—É–∑–∞ –Ω–∞ –ø—Ä–æ–±–µ–ª
              if (key.character == ' ') {
                if (isPlaying) {
                  pauseGame();
                } else if (isPaused) {
                  resumeGame();
                }
              }
            },
            child: Stack(
              children: [
                BallWidget(),
                PlatformWidget(),

                // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
                if (shouldShowActionButton)
                  Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
                        if (isGameOver)
                          Padding(
                            padding: const EdgeInsets.only(bottom: 20),
                            child: Text(
                              myBricks.isEmpty ? '–ü–û–ë–ï–î–ê!' : '–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê',
                              style: TextStyle(
                                color: myBricks.isEmpty
                                    ? Colors.green
                                    : Colors.red,
                                fontSize: 32,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),

                        ElevatedButton.icon(
                          onPressed: onActionButtonPressed,
                          icon: Icon(getButtonIcon(), size: 30),
                          label: Text(
                            getButtonText(),
                            style: TextStyle(fontSize: 18),
                          ),
                          style: ElevatedButton.styleFrom(
                            padding: EdgeInsets.symmetric(
                              horizontal: 30,
                              vertical: 15,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),

                // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
                if (isPlaying)
                  Positioned(
                    top: 50,
                    right: 20,
                    child: IconButton(
                      onPressed: pauseGame,
                      icon: Icon(
                        Icons.pause,
                        color: Colors.white,
                        size: 30,
                      ),
                    ),
                  ),

                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                Positioned(
                  top: 50,
                  left: 20,
                  child: Container(
                    padding: EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.black54,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      'State: ${currentGameState.name}',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                      ),
                    ),
                  ),
                ),

                ...myBricks,
                CustomPaint(
                  painter: ParticlePainter(particleSystem),
                  size: Size.infinite,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _focusNode.dispose();
    sub.cancel();
    gameTimer?.cancel(); // –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä
    super.dispose();
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  static double firstBrickX = -1 + wallGap;
  static double firstBrixkY = -0.9;
  static double brickWidth = 0.4;
  static double brickHeight = 0.09;
  static double brickGap = 0.01;
  static int numberOfBrickInRow = 4;
  static double wallGap = 0.5 *
      (2 -
          numberOfBrickInRow * brickWidth -
          (numberOfBrickInRow - 1) * brickGap);

  bool isBallDownScreen(BallWidgetController ball) {
    return ball.y > ball.screenSize.height * 0.95;
  }

  restoreBricks() {
    myBricks = [
      Brick(brickHeight, brickWidth, firstBrickX + (brickWidth + brickGap),
          firstBrixkY, Colors.white),
      Brick(brickHeight, brickWidth, firstBrickX, firstBrixkY, Colors.red),
      Brick(brickHeight, brickWidth, firstBrickX + 2 * (brickWidth + brickGap),
          firstBrixkY, Colors.green),
      Brick(brickHeight, brickWidth, firstBrickX + 3 * (brickWidth + brickGap),
          firstBrixkY, Colors.blue)
    ];
  }

  void checkForBrokenBricks(BallWidgetController ball) {
    for (int i = 0; i < myBricks.length; i++) {
      Brick brick = myBricks[i];
      Rect brickRect = brick.getBrickPixelRect(context);
      Rect ballRect = ball.ballRect;
      if (ballRect.overlaps(brickRect)) {
        setState(() {
          myBricks.removeAt(i);
        });
        explodeBrick(
          Offset(
            brickRect.left + brickRect.width / 2,
            brickRect.top + brickRect.height / 2,
          ),
          brick.color,
        );
        ball.yDirection = ball.yDirection == BallDirection.DOWN
            ? BallDirection.UP
            : BallDirection.DOWN;
        break;
      }
    }
  }

  void explodeBrick(Offset brickPosition, Color brickColor) {
    particleSystem.addBrickExplosion(
      brickPosition,
      brickColor,
      count: 20,
      intensity: 1.2,
    );
  }
}
